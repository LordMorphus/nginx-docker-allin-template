version: "3.9"

services:
  nginx:
    build: 
      context: ./nginx
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    ports:
      - "80:80"
    volumes:
      - ${HTML_HOST_ROOT_DIRECTORY}:/var/www/html
    container_name: nginx
    networks:
      - d_li
    depends_on:
      - php
    restart: unless-stopped
      
  php:
    build: 
      context: ./php
      args:
        - UID=${UID:-1000}
        - GID=${GID:-1000}
    volumes:
      - ${HTML_HOST_ROOT_DIRECTORY}:/var/www/html
    container_name: php
    networks:
      - d_li
    ports:
      - "9000:9000"
    restart: unless-stopped

  node:
    image: node:lts
    volumes:
      - ${HTML_HOST_ROOT_DIRECTORY}:/var/www/html
    command: sh -c "cd /var/www/html && npm install -g browser-sync && browser-sync start --proxy 'nginx' --files '**/*.php, **/*.html, **/*.css, **/*.js' --host 0.0.0.0"
    working_dir: /var/www/html
    ports:
      - "5173:5173"
      - "3000:3000" 
      - "3001:3001"  
    environment:
      - CHOKIDAR_USEPOLLING=true
    container_name: node
    networks:
      - d_li
    restart: unless-stopped
  
  db:
    image: mysql:9.2.0
    ports: 
      - "3306:3306"
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    container_name: db
    networks:
      - d_li
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  phpmyadmin:
    image: phpmyadmin:5.2.2-apache
    ports:
      - "8080:80"
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=db
      - PMA_USER=${MYSQL_USER}
      - PMA_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    container_name: phpmyadmin
    networks:
      - d_li
    restart: unless-stopped

networks:
  d_li:

volumes:
  db_data:
